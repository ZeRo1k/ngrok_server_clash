param (
    [int]$seconds = 60
)

$code = @"
using System;
using System.Runtime.InteropServices;

public class UserInput {
    [DllImport("user32.dll")]
    public static extern bool BlockInput(bool fBlockIt);
}
"@

# Add the type
$userInput = Add-Type -TypeDefinition $code -Name UserInput -Namespace UserInput -PassThru

# Function to disable user input
function Disable-UserInput {
    param (
        [int]$seconds
    )

    $startTime = Get-Date
    $userInput::BlockInput($true)

    for ($i = $seconds; $i -gt 0; $i--) {
        Start-Sleep -Seconds 1
        $elapsed = (Get-Date) - $startTime
        $remainingTime = $seconds - [math]::Ceiling($elapsed.TotalSeconds)
        Set-Content -Path "C:\Temp\DisableUserInputTime.txt" -Value $remainingTime
    }

    $userInput::BlockInput($false)
    Remove-ScheduledTask -TaskName "DisableUserInputTask"
    Remove-Item -Path $MyInvocation.MyCommand.Path -Force
}

if (-not (Test-Path -Path "C:\Temp\DisableUserInputTime.txt")) {
    $remainingTime = $seconds
} else {
    $remainingTime = [int](Get-Content -Path "C:\Temp\DisableUserInputTime.txt" | Out-String)
    Remove-Item -Path "C:\Temp\DisableUserInputTime.txt" -Force
}

if ($remainingTime -gt 0) {
    Disable-UserInput -seconds $remainingTime
}

# Schedule the task
$taskName = "DisableUserInputTask"
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File `"$MyInvocation.MyCommand.Path`" -seconds $seconds"
$trigger = New-ScheduledTaskTrigger -AtStartup
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden -RunOnlyIfNetworkAvailable -StartWhenAvailable
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName $taskName -Description "Disable User Input for $seconds seconds" -Settings $settings
